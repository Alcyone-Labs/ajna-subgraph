// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddQuoteToken extends ethereum.Event {
  get params(): AddQuoteToken__Params {
    return new AddQuoteToken__Params(this);
  }
}

export class AddQuoteToken__Params {
  _event: AddQuoteToken;

  constructor(event: AddQuoteToken) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lup(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lup(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimCollateral extends ethereum.Event {
  get params(): ClaimCollateral__Params {
    return new ClaimCollateral__Params(this);
  }
}

export class ClaimCollateral__Params {
  _event: ClaimCollateral;

  constructor(event: ClaimCollateral) {
    this._event = event;
  }

  get claimer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lps(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get debt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Purchase extends ethereum.Event {
  get params(): Purchase__Params {
    return new Purchase__Params(this);
  }
}

export class Purchase__Params {
  _event: Purchase;

  constructor(event: Purchase) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveQuoteToken extends ethereum.Event {
  get params(): RemoveQuoteToken__Params {
    return new RemoveQuoteToken__Params(this);
  }
}

export class RemoveQuoteToken__Params {
  _event: RemoveQuoteToken;

  constructor(event: RemoveQuoteToken) {
    this._event = event;
  }

  get lender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lup(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lup(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateInterestRate extends ethereum.Event {
  get params(): UpdateInterestRate__Params {
    return new UpdateInterestRate__Params(this);
  }
}

export class UpdateInterestRate__Params {
  _event: UpdateInterestRate;

  constructor(event: UpdateInterestRate) {
    this._event = event;
  }

  get oldRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC20Pool__borrowersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class ERC20Pool__bucketAtResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class ERC20Pool__getBorrowerInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class ERC20Pool__getLPTokenExchangeValueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ERC20Pool extends ethereum.SmartContract {
  static bind(address: Address): ERC20Pool {
    return new ERC20Pool("ERC20Pool", address);
  }

  SECONDS_PER_YEAR(): BigInt {
    let result = super.call(
      "SECONDS_PER_YEAR",
      "SECONDS_PER_YEAR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SECONDS_PER_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SECONDS_PER_YEAR",
      "SECONDS_PER_YEAR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addQuoteToken(_recipient: Address, _amount: BigInt, _price: BigInt): BigInt {
    let result = super.call(
      "addQuoteToken",
      "addQuoteToken(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBigInt();
  }

  try_addQuoteToken(
    _recipient: Address,
    _amount: BigInt,
    _price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addQuoteToken",
      "addQuoteToken(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowers(param0: Address): ERC20Pool__borrowersResult {
    let result = super.call(
      "borrowers",
      "borrowers(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new ERC20Pool__borrowersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_borrowers(
    param0: Address
  ): ethereum.CallResult<ERC20Pool__borrowersResult> {
    let result = super.tryCall(
      "borrowers",
      "borrowers(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Pool__borrowersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  bucketAt(_price: BigInt): ERC20Pool__bucketAtResult {
    let result = super.call(
      "bucketAt",
      "bucketAt(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );

    return new ERC20Pool__bucketAtResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_bucketAt(_price: BigInt): ethereum.CallResult<ERC20Pool__bucketAtResult> {
    let result = super.tryCall(
      "bucketAt",
      "bucketAt(uint256):(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Pool__bucketAtResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralScale(): BigInt {
    let result = super.call(
      "collateralScale",
      "collateralScale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralScale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralScale",
      "collateralScale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimatePriceForLoan(_amount: BigInt): BigInt {
    let result = super.call(
      "estimatePriceForLoan",
      "estimatePriceForLoan(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );

    return result[0].toBigInt();
  }

  try_estimatePriceForLoan(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimatePriceForLoan",
      "estimatePriceForLoan(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowerInfo(_borrower: Address): ERC20Pool__getBorrowerInfoResult {
    let result = super.call(
      "getBorrowerInfo",
      "getBorrowerInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return new ERC20Pool__getBorrowerInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_getBorrowerInfo(
    _borrower: Address
  ): ethereum.CallResult<ERC20Pool__getBorrowerInfoResult> {
    let result = super.tryCall(
      "getBorrowerInfo",
      "getBorrowerInfo(address):(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Pool__getBorrowerInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getEncumberedCollateral(): BigInt {
    let result = super.call(
      "getEncumberedCollateral",
      "getEncumberedCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEncumberedCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEncumberedCollateral",
      "getEncumberedCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHup(): BigInt {
    let result = super.call("getHup", "getHup():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getHup(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getHup", "getHup():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLPTokenBalance(_owner: Address, _price: BigInt): BigInt {
    let result = super.call(
      "getLPTokenBalance",
      "getLPTokenBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLPTokenBalance(
    _owner: Address,
    _price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLPTokenBalance",
      "getLPTokenBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLPTokenExchangeValue(
    _lpTokens: BigInt,
    _price: BigInt
  ): ERC20Pool__getLPTokenExchangeValueResult {
    let result = super.call(
      "getLPTokenExchangeValue",
      "getLPTokenExchangeValue(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lpTokens),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );

    return new ERC20Pool__getLPTokenExchangeValueResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getLPTokenExchangeValue(
    _lpTokens: BigInt,
    _price: BigInt
  ): ethereum.CallResult<ERC20Pool__getLPTokenExchangeValueResult> {
    let result = super.tryCall(
      "getLPTokenExchangeValue",
      "getLPTokenExchangeValue(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_lpTokens),
        ethereum.Value.fromUnsignedBigInt(_price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC20Pool__getLPTokenExchangeValueResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getMinimumPoolPrice(): BigInt {
    let result = super.call(
      "getMinimumPoolPrice",
      "getMinimumPoolPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMinimumPoolPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumPoolPrice",
      "getMinimumPoolPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingInflator(): BigInt {
    let result = super.call(
      "getPendingInflator",
      "getPendingInflator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingInflator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingInflator",
      "getPendingInflator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolActualUtilization(): BigInt {
    let result = super.call(
      "getPoolActualUtilization",
      "getPoolActualUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPoolActualUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolActualUtilization",
      "getPoolActualUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolCollateralization(): BigInt {
    let result = super.call(
      "getPoolCollateralization",
      "getPoolCollateralization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPoolCollateralization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolCollateralization",
      "getPoolCollateralization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolPrice(): BigInt {
    let result = super.call("getPoolPrice", "getPoolPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPoolPrice", "getPoolPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolTargetUtilization(): BigInt {
    let result = super.call(
      "getPoolTargetUtilization",
      "getPoolTargetUtilization():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPoolTargetUtilization(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolTargetUtilization",
      "getPoolTargetUtilization():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hdp(): BigInt {
    let result = super.call("hdp", "hdp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_hdp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("hdp", "hdp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inflatorSnapshot(): BigInt {
    let result = super.call(
      "inflatorSnapshot",
      "inflatorSnapshot():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_inflatorSnapshot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inflatorSnapshot",
      "inflatorSnapshot():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isBucketInitialized(_price: BigInt): boolean {
    let result = super.call(
      "isBucketInitialized",
      "isBucketInitialized(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );

    return result[0].toBoolean();
  }

  try_isBucketInitialized(_price: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBucketInitialized",
      "isBucketInitialized(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastInflatorSnapshotUpdate(): BigInt {
    let result = super.call(
      "lastInflatorSnapshotUpdate",
      "lastInflatorSnapshotUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastInflatorSnapshotUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastInflatorSnapshotUpdate",
      "lastInflatorSnapshotUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpBalance(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "lpBalance",
      "lpBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_lpBalance(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpBalance",
      "lpBalance(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lup(): BigInt {
    let result = super.call("lup", "lup():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lup(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lup", "lup():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousRate(): BigInt {
    let result = super.call("previousRate", "previousRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_previousRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("previousRate", "previousRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousRateUpdate(): BigInt {
    let result = super.call(
      "previousRateUpdate",
      "previousRateUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_previousRateUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousRateUpdate",
      "previousRateUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteToken(): Address {
    let result = super.call("quoteToken", "quoteToken():(address)", []);

    return result[0].toAddress();
  }

  try_quoteToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("quoteToken", "quoteToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteTokenScale(): BigInt {
    let result = super.call(
      "quoteTokenScale",
      "quoteTokenScale():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_quoteTokenScale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "quoteTokenScale",
      "quoteTokenScale():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalCollateral(): BigInt {
    let result = super.call(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalQuoteToken(): BigInt {
    let result = super.call(
      "totalQuoteToken",
      "totalQuoteToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalQuoteToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalQuoteToken",
      "totalQuoteToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class AddQuoteTokenCall extends ethereum.Call {
  get inputs(): AddQuoteTokenCall__Inputs {
    return new AddQuoteTokenCall__Inputs(this);
  }

  get outputs(): AddQuoteTokenCall__Outputs {
    return new AddQuoteTokenCall__Outputs(this);
  }
}

export class AddQuoteTokenCall__Inputs {
  _call: AddQuoteTokenCall;

  constructor(call: AddQuoteTokenCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddQuoteTokenCall__Outputs {
  _call: AddQuoteTokenCall;

  constructor(call: AddQuoteTokenCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _stopPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this);
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this);
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class PurchaseBidCall extends ethereum.Call {
  get inputs(): PurchaseBidCall__Inputs {
    return new PurchaseBidCall__Inputs(this);
  }

  get outputs(): PurchaseBidCall__Outputs {
    return new PurchaseBidCall__Outputs(this);
  }
}

export class PurchaseBidCall__Inputs {
  _call: PurchaseBidCall;

  constructor(call: PurchaseBidCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PurchaseBidCall__Outputs {
  _call: PurchaseBidCall;

  constructor(call: PurchaseBidCall) {
    this._call = call;
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RemoveQuoteTokenCall extends ethereum.Call {
  get inputs(): RemoveQuoteTokenCall__Inputs {
    return new RemoveQuoteTokenCall__Inputs(this);
  }

  get outputs(): RemoveQuoteTokenCall__Outputs {
    return new RemoveQuoteTokenCall__Outputs(this);
  }
}

export class RemoveQuoteTokenCall__Inputs {
  _call: RemoveQuoteTokenCall;

  constructor(call: RemoveQuoteTokenCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveQuoteTokenCall__Outputs {
  _call: RemoveQuoteTokenCall;

  constructor(call: RemoveQuoteTokenCall) {
    this._call = call;
  }
}

export class RepayCall extends ethereum.Call {
  get inputs(): RepayCall__Inputs {
    return new RepayCall__Inputs(this);
  }

  get outputs(): RepayCall__Outputs {
    return new RepayCall__Outputs(this);
  }
}

export class RepayCall__Inputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }

  get _maxAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayCall__Outputs {
  _call: RepayCall;

  constructor(call: RepayCall) {
    this._call = call;
  }
}

export class UpdateInterestRateCall extends ethereum.Call {
  get inputs(): UpdateInterestRateCall__Inputs {
    return new UpdateInterestRateCall__Inputs(this);
  }

  get outputs(): UpdateInterestRateCall__Outputs {
    return new UpdateInterestRateCall__Outputs(this);
  }
}

export class UpdateInterestRateCall__Inputs {
  _call: UpdateInterestRateCall;

  constructor(call: UpdateInterestRateCall) {
    this._call = call;
  }
}

export class UpdateInterestRateCall__Outputs {
  _call: UpdateInterestRateCall;

  constructor(call: UpdateInterestRateCall) {
    this._call = call;
  }
}
