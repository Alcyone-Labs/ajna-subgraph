// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quote(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ERC20PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): ERC20PoolFactory {
    return new ERC20PoolFactory("ERC20PoolFactory", address);
  }

  deployPool(collateral: Address, quote: Address): Address {
    let result = super.call(
      "deployPool",
      "deployPool(address,address):(address)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(quote)
      ]
    );

    return result[0].toAddress();
  }

  try_deployPool(
    collateral: Address,
    quote: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployPool",
      "deployPool(address,address):(address)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(quote)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployedPools(param0: Address, param1: Address): Address {
    let result = super.call(
      "deployedPools",
      "deployedPools(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_deployedPools(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployedPools",
      "deployedPools(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isPoolDeployed(collateral: Address, quote: Address): boolean {
    let result = super.call(
      "isPoolDeployed",
      "isPoolDeployed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(quote)
      ]
    );

    return result[0].toBoolean();
  }

  try_isPoolDeployed(
    collateral: Address,
    quote: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolDeployed",
      "isPoolDeployed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(collateral),
        ethereum.Value.fromAddress(quote)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployPoolCall extends ethereum.Call {
  get inputs(): DeployPoolCall__Inputs {
    return new DeployPoolCall__Inputs(this);
  }

  get outputs(): DeployPoolCall__Outputs {
    return new DeployPoolCall__Outputs(this);
  }
}

export class DeployPoolCall__Inputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get quote(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeployPoolCall__Outputs {
  _call: DeployPoolCall;

  constructor(call: DeployPoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
